// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package middleware is a generated GoMock package.
package middleware

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserStore is a mock of UserStore interface
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// CheckUserIdentity mocks base method
func (m *MockUserStore) CheckUserIdentity(ctx context.Context, username, password string) (UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIdentity", ctx, username, password)
	ret0, _ := ret[0].(UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserIdentity indicates an expected call of CheckUserIdentity
func (mr *MockUserStoreMockRecorder) CheckUserIdentity(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIdentity", reflect.TypeOf((*MockUserStore)(nil).CheckUserIdentity), ctx, username, password)
}

// MockTokenStore is a mock of TokenStore interface
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// GetTokenByUser mocks base method
func (m *MockTokenStore) GetTokenByUser(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByUser", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByUser indicates an expected call of GetTokenByUser
func (mr *MockTokenStoreMockRecorder) GetTokenByUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByUser", reflect.TypeOf((*MockTokenStore)(nil).GetTokenByUser), ctx, username)
}
