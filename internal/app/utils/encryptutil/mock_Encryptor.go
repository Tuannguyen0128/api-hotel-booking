// Code generated by mockery v2.14.0. DO NOT EDIT.

package encryptutil

import mock "github.com/stretchr/testify/mock"

// MockEncryptor is an autogenerated mock type for the Encryptor type
type MockEncryptor struct {
	mock.Mock
}

// CompareHashedWithPlainText provides a mock function with given fields: hashedPlaintext, plaintext
func (_m *MockEncryptor) CompareHashedWithPlainText(hashedPlaintext string, plaintext string) (bool, error) {
	ret := _m.Called(hashedPlaintext, plaintext)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedPlaintext, plaintext)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(hashedPlaintext, plaintext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Decrypt provides a mock function with given fields: ciphertext
func (_m *MockEncryptor) Decrypt(ciphertext string) (string, error) {
	ret := _m.Called(ciphertext)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ciphertext)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ciphertext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecryptWithUnmarshalling provides a mock function with given fields: ciphertext, v
func (_m *MockEncryptor) DecryptWithUnmarshalling(ciphertext string, v interface{}) error {
	ret := _m.Called(ciphertext, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(ciphertext, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encrypt provides a mock function with given fields: plaintext, isDeterministic
func (_m *MockEncryptor) Encrypt(plaintext string, isDeterministic bool) (string, error) {
	ret := _m.Called(plaintext, isDeterministic)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, bool) string); ok {
		r0 = rf(plaintext, isDeterministic)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(plaintext, isDeterministic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptWithMarshalling provides a mock function with given fields: v, isDeterministic
func (_m *MockEncryptor) EncryptWithMarshalling(v interface{}, isDeterministic bool) (string, error) {
	ret := _m.Called(v, isDeterministic)

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}, bool) string); ok {
		r0 = rf(v, isDeterministic)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, bool) error); ok {
		r1 = rf(v, isDeterministic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hash provides a mock function with given fields: plaintext
func (_m *MockEncryptor) Hash(plaintext string) (string, error) {
	ret := _m.Called(plaintext)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plaintext)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plaintext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockEncryptor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEncryptor creates a new instance of MockEncryptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEncryptor(t mockConstructorTestingTNewMockEncryptor) *MockEncryptor {
	mock := &MockEncryptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
