// Code generated by mockery v2.14.0. DO NOT EDIT.

package memorizer

import mock "github.com/stretchr/testify/mock"

// mockCache is an autogenerated mock type for the cache type
type mockCache[V interface{}] struct {
	mock.Mock
}

// Delete provides a mock function with given fields: k
func (_m *mockCache[V]) Delete(k string) bool {
	ret := _m.Called(k)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: k
func (_m *mockCache[V]) Get(k string) (V, bool) {
	ret := _m.Called(k)

	var r0 V
	if rf, ok := ret.Get(0).(func(string) V); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(V)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(k)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Put provides a mock function with given fields: v
func (_m *mockCache[V]) Put(v V) {
	_m.Called(v)
}

type mockConstructorTestingTnewMockCache interface {
	mock.TestingT
	Cleanup(func())
}

// newMockCache creates a new instance of mockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockCache[V interface{}](t mockConstructorTestingTnewMockCache) *mockCache[V] {
	mock := &mockCache[V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
